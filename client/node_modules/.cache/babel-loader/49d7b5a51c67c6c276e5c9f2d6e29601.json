{"ast":null,"code":"import { FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, CREATE, UPDATE, DELETE, LIKE, COMMENT } from '../constants/actionTypes';\n\nconst temp = (state = {\n  isLoading: true,\n  posts: []\n}, action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return { ...state,\n        isLoading: true\n      };\n\n    case 'END_LOADING':\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload.data\n      };\n\n    case FETCH_POST:\n      alert('hi');\n      return { ...state,\n        post: action.payload.post\n      };\n\n    case LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    case COMMENT:\n      return { ...state,\n        posts: state.posts.map(post => {\n          if (post._id === +action.payload._id) {\n            return action.payload;\n          }\n\n          return post;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default temp;","map":{"version":3,"sources":["C:/Users/Hp/Documents/BlogUsingMERN/BlogAndArchieveUsingMERN/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","FETCH_POST","CREATE","UPDATE","DELETE","LIKE","COMMENT","temp","state","isLoading","posts","action","type","payload","data","currentPage","numberOfPages","alert","post","map","_id","filter"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,UAArC,EAAiDC,MAAjD,EAAyDC,MAAzD,EAAiEC,MAAjE,EAAyEC,IAAzE,EAA+EC,OAA/E,QAA8F,0BAA9F;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAAT,EAAyCC,MAAzC,KAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAE,GAAGD,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKV,SAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAGLC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,aAAa,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJzB,OAAP;;AAMF,SAAKhB,eAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC;AAAlC,OAAP;;AACF,SAAKb,UAAL;AACGgB,MAAAA,KAAK,CAAC,IAAD,CAAL;AACD,aAAO,EAAE,GAAGT,KAAL;AAAYU,QAAAA,IAAI,EAAEP,MAAM,CAACE,OAAP,CAAeK;AAAjC,OAAP;;AACF,SAAKb,IAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYS,GAAZ,CAAiBD,IAAD,IAAWA,IAAI,CAACE,GAAL,KAAaT,MAAM,CAACE,OAAP,CAAeO,GAA5B,GAAkCT,MAAM,CAACE,OAAzC,GAAmDK,IAA9E;AAAnB,OAAP;;AACF,SAAKhB,MAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYE,QAAAA,KAAK,EAAE,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBC,MAAM,CAACE,OAAxB;AAAnB,OAAP;;AACF,SAAKV,MAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYS,GAAZ,CAAiBD,IAAD,IAAWA,IAAI,CAACE,GAAL,KAAaT,MAAM,CAACE,OAAP,CAAeO,GAA5B,GAAkCT,MAAM,CAACE,OAAzC,GAAmDK,IAA9E;AAAnB,OAAP;;AACF,SAAKd,MAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAYE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYW,MAAZ,CAAoBH,IAAD,IAAUA,IAAI,CAACE,GAAL,KAAaT,MAAM,CAACE,OAAjD;AAAnB,OAAP;;AACF,SAAKP,OAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYS,GAAZ,CAAiBD,IAAD,IAAU;AAC/B,cAAIA,IAAI,CAACE,GAAL,KAAa,CAACT,MAAM,CAACE,OAAP,CAAeO,GAAjC,EAAsC;AACpC,mBAAOT,MAAM,CAACE,OAAd;AACD;;AACD,iBAAOK,IAAP;AACD,SALM;AAFF,OAAP;;AASF;AACE,aAAOV,KAAP;AApCJ;AAsCD,CAvCD;;AAyCA,eAAeD,IAAf","sourcesContent":["import { FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, CREATE, UPDATE, DELETE, LIKE, COMMENT } from '../constants/actionTypes';\r\n\r\nconst temp = (state = { isLoading: true, posts: [] }, action) => {\r\n  switch (action.type) {\r\n    case 'START_LOADING':\r\n      return { ...state, isLoading: true };\r\n    case 'END_LOADING':\r\n      return { ...state, isLoading: false };\r\n    case FETCH_ALL:\r\n      return {\r\n        ...state,\r\n        posts: action.payload.data,\r\n        currentPage: action.payload.currentPage,\r\n        numberOfPages: action.payload.numberOfPages,\r\n      };\r\n    case FETCH_BY_SEARCH:\r\n      return { ...state, posts: action.payload.data };\r\n    case FETCH_POST:\r\n       alert('hi')\r\n      return { ...state, post: action.payload.post };\r\n    case LIKE:\r\n      return { ...state, posts: state.posts.map((post) => (post._id === action.payload._id ? action.payload : post)) };\r\n    case CREATE:\r\n      return { ...state, posts: [...state.posts, action.payload] };\r\n    case UPDATE:\r\n      return { ...state, posts: state.posts.map((post) => (post._id === action.payload._id ? action.payload : post)) };\r\n    case DELETE:\r\n      return { ...state, posts: state.posts.filter((post) => post._id !== action.payload) };\r\n    case COMMENT:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) => {\r\n          if (post._id === +action.payload._id) {\r\n            return action.payload;\r\n          }\r\n          return post;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default temp;\r\n"]},"metadata":{},"sourceType":"module"}