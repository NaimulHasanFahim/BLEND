{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sabbi\\\\OneDrive\\\\Desktop\\\\nodejs\\\\MERN_project\\\\part4\\\\New folder\\\\BlogAndArchieveUsingMERN-1\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport { useNavigate } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  currentId,\n  setCurrentId,\n  userstate\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: [],\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const history = useNavigate(); // clears the post form to it's default state\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: [],\n      selectedFile: ''\n    });\n  }; //populating the form with post data to update\n\n\n  useEffect(() => {\n    if (!(post === null || post === void 0 ? void 0 : post.title)) clear();\n    if (post) setPostData(post); // setting the new data to which got from the form const[postData,setPostData]\n  }, [post]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }, history));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  }; // if (!user?.result?.name) {\n  //   return (\n  //     <Paper className={classes.paper} elevation={6}>\n  //       <Typography variant=\"h6\" align=\"center\">\n  //         Please Sign In to create your own memories and like other's memories.\n  //       </Typography>\n  //     </Paper>\n  //   );\n  // }\n\n\n  const handleAddChip = tag => {\n    setPostData({ ...postData,\n      tags: [...postData.tags, tag]\n    });\n  };\n\n  const handleDeleteChip = chipToDelete => {\n    setPostData({ ...postData,\n      tags: postData.tags.filter(tag => tag !== chipToDelete)\n    });\n  };\n\n  if (userstate != null) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        autoComplete: \"off\",\n        noValidate: true,\n        className: `${classes.root} ${classes.form}`,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: currentId ? `Updating \"${post.title}\"` : 'Share Your Thought and Experience'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"title\",\n          variant: \"outlined\",\n          label: \"Title\",\n          fullWidth: true,\n          value: postData.title,\n          onChange: e => setPostData({ ...postData,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"message\",\n          variant: \"outlined\",\n          label: \"Message\",\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          value: postData.message,\n          onChange: e => setPostData({ ...postData,\n            message: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"tags\",\n          variant: \"outlined\",\n          label: \"Tags (coma separated)\",\n          fullWidth: true,\n          value: postData.tags,\n          onChange: e => setPostData({ ...postData,\n            tags: e.target.value.split(',')\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.fileInput,\n          children: /*#__PURE__*/_jsxDEV(FileBase, {\n            type: \"file\",\n            multiple: false,\n            onDone: ({\n              base64\n            }) => setPostData({ ...postData,\n              selectedFile: base64\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttonSubmit,\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          type: \"submit\",\n          fullWidth: true,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          size: \"small\",\n          onClick: clear,\n          fullWidth: true,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  } else if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name) || userstate == null) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to share your knowledge and resources.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Form, \"HcPvDf5cSw4LVubU3zUr3NJjGn0=\", false, function () {\n  return [useSelector, useDispatch, useStyles, useNavigate];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/sabbi/OneDrive/Desktop/nodejs/MERN_project/part4/New folder/BlogAndArchieveUsingMERN-1/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","useNavigate","ChipInput","createPost","updatePost","useStyles","Form","currentId","setCurrentId","userstate","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","history","clear","handleSubmit","e","preventDefault","name","result","handleAddChip","tag","handleDeleteChip","chipToDelete","filter","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FileBase from 'react-file-base64';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ChipInput from 'material-ui-chip-input';\r\n\r\nimport { createPost, updatePost } from '../../actions/posts';\r\nimport useStyles from './styles';\r\n\r\nconst Form = ({ currentId, setCurrentId , userstate}) => {\r\n  const [postData, setPostData] = useState({ title: '', message: '', tags: [], selectedFile: '' });\r\n  const post = useSelector((state) => (currentId ? state.posts.posts.find((message) => message._id === currentId) : null));\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n  const history = useNavigate();\r\n\r\n  // clears the post form to it's default state\r\n  const clear = () => {\r\n    setCurrentId(0);\r\n    setPostData({ title: '', message: '', tags: [], selectedFile: '' });\r\n  };\r\n\r\n  //populating the form with post data to update\r\n  useEffect(() => {\r\n    if (!post?.title) clear();\r\n    if (post) setPostData(post); // setting the new data to which got from the form const[postData,setPostData]\r\n  }, [post]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (currentId === 0) {\r\n      dispatch(createPost({ ...postData, name: user?.result?.name }, history));\r\n      clear();\r\n    } else {\r\n      dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\r\n      clear();\r\n    }\r\n  };\r\n\r\n  // if (!user?.result?.name) {\r\n  //   return (\r\n  //     <Paper className={classes.paper} elevation={6}>\r\n  //       <Typography variant=\"h6\" align=\"center\">\r\n  //         Please Sign In to create your own memories and like other's memories.\r\n  //       </Typography>\r\n  //     </Paper>\r\n  //   );\r\n  // }\r\n\r\n  const handleAddChip = (tag) => {\r\n    setPostData({ ...postData, tags: [...postData.tags, tag] });\r\n  };\r\n\r\n  const handleDeleteChip = (chipToDelete) => {\r\n    setPostData({ ...postData, tags: postData.tags.filter((tag) => tag !== chipToDelete) });\r\n  };\r\n\r\n  if (userstate != null) {\r\n    return (\r\n     \r\n        <Paper className={classes.paper}>\r\n          <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n           <Typography variant=\"h6\">{currentId ? `Updating \"${post.title}\"` : 'Share Your Thought and Experience'}</Typography>\r\n           <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\r\n           <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\r\n           <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (coma separated)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\r\n           <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\r\n           <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n           <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\r\n          </form>\r\n        </Paper>\r\n  );\r\n  } else if(!user?.result?.name || userstate == null) {\r\n    return (\r\n      <Paper className={classes.paper}>\r\n        <Typography variant=\"h6\" align=\"center\">\r\n          Please Sign In to share your knowledge and resources.\r\n        </Typography>\r\n      </Paper>\r\n    ); \r\n  }\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}