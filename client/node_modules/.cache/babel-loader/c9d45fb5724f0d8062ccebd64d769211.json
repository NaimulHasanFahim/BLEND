{"ast":null,"code":"import { START_LOADING, COMMENT, END_LOADING, FETCH_ALL, UPDATE_CONTRIBUTE, FETCH_CONTRIBUTION_BY_ID, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE, FETCH_SINGLE_USER_ALL } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: {\n        post: data\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery); // console.log(data);\n\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    console.log(post);\n    const {\n      data\n    } = await api.createPost(post);\n    console.log(data);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    console.log(data);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; ///\n\nexport const updateContribute = (id, contributeddata) => async dispatch => {\n  try {\n    // console.log(contributeddata)\n    const {\n      data\n    } = await api.updateContribute(id, contributeddata); // console.log(data)\n\n    dispatch({\n      type: UPDATE_CONTRIBUTE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getContributionByPostId = (id, setContributedSinglePostData) => async dispatch => {\n  try {\n    // dispatch({ type: START_LOADING });\n    const {\n      data\n    } = await api.fetchContributionByPostId(id); // console.log(data)\n\n    setContributedSinglePostData(data); // let allContribution = []\n    // data.forEach(element => {\n    //   const temp_id = element._id;\n    //   console.log(temp_id)\n    //   const userD = api.getIndividulaContributionById(temp_id);\n    //         allContribution.push(userD)\n    // });\n    // console.log(allContribution)\n    // dispatch({ type: FETCH_CONTRIBUTION_BY_ID, payload: { post: data } });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getSingleUserPosts = (id, setAllPosts) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchSingleUserPosts(id);\n    setAllPosts(data);\n    dispatch({\n      type: FETCH_SINGLE_USER_ALL,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/Hp/Documents/BlogUsingMERN/BlogAndArchieveUsingMERN/client/src/actions/posts.js"],"names":["START_LOADING","COMMENT","END_LOADING","FETCH_ALL","UPDATE_CONTRIBUTE","FETCH_CONTRIBUTION_BY_ID","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","FETCH_SINGLE_USER_ALL","api","getPost","id","dispatch","type","data","fetchPost","payload","post","error","console","log","getPostsBySearch","searchQuery","fetchPostsBySearch","getPosts","page","currentPage","numberOfPages","fetchPosts","commentPost","value","comment","comments","createPost","history","_id","updatePost","updateContribute","contributeddata","getContributionByPostId","setContributedSinglePostData","fetchContributionByPostId","likePost","user","JSON","parse","localStorage","getItem","token","deletePost","getSingleUserPosts","setAllPosts","fetchSingleUserPosts"],"mappings":"AAAA,SAASA,aAAT,EAAuBC,OAAvB,EAAiCC,WAAjC,EAA8CC,SAA9C,EAAwDC,iBAAxD,EAA2EC,wBAA3E,EAAqGC,UAArG,EAAiHC,eAAjH,EAAkIC,MAAlI,EAA0IC,MAA1I,EAAkJC,MAAlJ,EAA0JC,IAA1J,EAA+JC,qBAA/J,QAA4L,0BAA5L;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AAEA,OAAO,MAAMC,OAAO,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEkB,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACM,SAAJ,CAAcJ,EAAd,CAAvB;AAEAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX,UAAR;AAAoBc,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAA7B,KAAD,CAAR;AACD,GAND,CAME,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMG,gBAAgB,GAAIC,WAAD,IAAiB,MAAOV,QAAP,IAAoB;AACnE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEkB,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AAAR,QAAqB,MAAML,GAAG,CAACc,kBAAJ,CAAuBD,WAAvB,CAAjC,CAFE,CAGF;;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,eAAR;AAAyBa,MAAAA,OAAO,EAAE;AAAEF,QAAAA;AAAF;AAAlC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOoB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAaP,OAAO,MAAMM,QAAQ,GAAIC,IAAD,IAAU,MAAOb,QAAP,IAAoB;AACpD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEkB,MAAAA,IAAI,EAAE;AAAEA,QAAAA,IAAF;AAAQY,QAAAA,WAAR;AAAqBC,QAAAA;AAArB;AAAR,QAAiD,MAAMlB,GAAG,CAACmB,UAAJ,CAAeH,IAAf,CAA7D;AAEAb,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEd,SAAR;AAAmBiB,MAAAA,OAAO,EAAE;AAAEF,QAAAA,IAAF;AAAQY,QAAAA,WAAR;AAAqBC,QAAAA;AAArB;AAA5B,KAAD,CAAR;AACAf,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOoB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAaP,OAAO,MAAMW,WAAW,GAAG,CAACC,KAAD,EAAQnB,EAAR,KAAe,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACsB,OAAJ,CAAYD,KAAZ,EAAmBnB,EAAnB,CAAvB;AAEAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEhB,OAAR;AAAiBmB,MAAAA,OAAO,EAAEF;AAA1B,KAAD,CAAR;AAEA,WAAOA,IAAI,CAACkB,QAAZ;AACD,GAND,CAME,OAAOd,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMe,UAAU,GAAG,CAAChB,IAAD,EAAOiB,OAAP,KAAmB,MAAOtB,QAAP,IAAoB;AAC/D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACAuB,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACwB,UAAJ,CAAehB,IAAf,CAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,MAAR;AAAgBY,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AAEAoB,IAAAA,OAAO,CAAE,UAASpB,IAAI,CAACqB,GAAI,EAApB,CAAP;AACD,GARD,CAQE,OAAOjB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAZM;AAcP,OAAO,MAAMkB,UAAU,GAAG,CAACzB,EAAD,EAAKM,IAAL,KAAc,MAAOL,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAC2B,UAAJ,CAAezB,EAAf,EAAmBM,IAAnB,CAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,MAAR;AAAgBW,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CARM,C,CAUP;;AACA,OAAO,MAAMmB,gBAAgB,GAAG,CAAC1B,EAAD,EAAK2B,eAAL,KAAyB,MAAO1B,QAAP,IAAoB;AAC3E,MAAI;AACF;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAC4B,gBAAJ,CAAqB1B,EAArB,EAAyB2B,eAAzB,CAAvB,CAFE,CAGF;;AACA1B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,iBAAR;AAA2BgB,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACD,GALD,CAKE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CATM;AAWP,OAAO,MAAMqB,uBAAuB,GAAG,CAAC5B,EAAD,EAAK6B,4BAAL,KAAsC,MAAO5B,QAAP,IAAoB;AAC/F,MAAI;AACF;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACgC,yBAAJ,CAA8B9B,EAA9B,CAAvB,CAFE,CAGF;;AACA6B,IAAAA,4BAA4B,CAAC1B,IAAD,CAA5B,CAJE,CAMF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAfD,CAeE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAnBM;AAsBP,OAAO,MAAMwB,QAAQ,GAAI/B,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAClD,QAAM+B,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;;AAEA,MAAI;AACF,UAAM;AAAEjC,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACiC,QAAJ,CAAa/B,EAAb,EAAiBgC,IAAjB,aAAiBA,IAAjB,uBAAiBA,IAAI,CAAEK,KAAvB,CAAvB;AAEApC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,IAAR;AAAcS,MAAAA,OAAO,EAAEF;AAAvB,KAAD,CAAR;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAM+B,UAAU,GAAItC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACpD,MAAI;AACF,UAAM,MAAMH,GAAG,CAACwC,UAAJ,CAAetC,EAAf,CAAZ;AAEAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,MAAR;AAAgBU,MAAAA,OAAO,EAAEL;AAAzB,KAAD,CAAR;AACD,GAJD,CAIE,OAAOO,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CARM;AAWP,OAAO,MAAMgC,kBAAkB,GAAG,CAAEvC,EAAF,EAAMwC,WAAN,KAAsB,MAAOvC,QAAP,IAAoB;AAC1E,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEkB,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AAAR,QAAqB,MAAML,GAAG,CAAC2C,oBAAJ,CAAyBzC,EAAzB,CAAjC;AACAwC,IAAAA,WAAW,CAACrC,IAAD,CAAX;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,qBAAR;AAA+BQ,MAAAA,OAAO,EAAE;AAAEF,QAAAA;AAAF;AAAxC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOoB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM","sourcesContent":["import { START_LOADING,COMMENT,  END_LOADING, FETCH_ALL,UPDATE_CONTRIBUTE, FETCH_CONTRIBUTION_BY_ID, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE,FETCH_SINGLE_USER_ALL } from '../constants/actionTypes';\r\nimport * as api from '../api/index.js';\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n\r\n    const { data } = await api.fetchPost(id);\r\n\r\n    dispatch({ type: FETCH_POST, payload: { post: data } });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\r\n    // console.log(data);\r\n    dispatch({ type: FETCH_BY_SEARCH, payload: { data }  });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data: { data, currentPage, numberOfPages } } = await api.fetchPosts(page);\r\n\r\n    dispatch({ type: FETCH_ALL, payload: { data, currentPage, numberOfPages } });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\nexport const commentPost = (value, id) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.comment(value, id);\r\n\r\n    dispatch({ type: COMMENT, payload: data });\r\n\r\n    return data.comments;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const createPost = (post, history) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    console.log(post);\r\n    const { data } = await api.createPost(post);\r\n    console.log(data);\r\n    dispatch({ type: CREATE, payload: data });\r\n\r\n    history(`/posts/${data._id}`);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n    console.log(data)\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n///\r\nexport const updateContribute = (id, contributeddata) => async (dispatch) => {\r\n  try {\r\n    // console.log(contributeddata)\r\n    const { data } = await api.updateContribute(id, contributeddata);\r\n    // console.log(data)\r\n    dispatch({ type: UPDATE_CONTRIBUTE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getContributionByPostId = (id, setContributedSinglePostData) => async (dispatch) => {\r\n  try {\r\n    // dispatch({ type: START_LOADING });\r\n    const { data } = await api.fetchContributionByPostId(id);\r\n    // console.log(data)\r\n    setContributedSinglePostData(data)\r\n\r\n    // let allContribution = []\r\n    // data.forEach(element => {\r\n    //   const temp_id = element._id;\r\n    //   console.log(temp_id)\r\n    //   const userD = api.getIndividulaContributionById(temp_id);\r\n    //         allContribution.push(userD)\r\n    // });\r\n    // console.log(allContribution)\r\n    // dispatch({ type: FETCH_CONTRIBUTION_BY_ID, payload: { post: data } });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n  try {\r\n    const { data } = await api.likePost(id, user?.token);\r\n\r\n    dispatch({ type: LIKE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await await api.deletePost(id);\r\n\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\nexport const getSingleUserPosts = ( id, setAllPosts) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data: { data } } = await api.fetchSingleUserPosts(id);\r\n    setAllPosts(data)\r\n    dispatch({ type: FETCH_SINGLE_USER_ALL, payload: { data} });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}