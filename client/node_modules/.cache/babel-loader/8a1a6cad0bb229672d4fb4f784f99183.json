{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Documents\\\\BlogUsingMERN\\\\BlogAndArchieveUsingMERN\\\\client\\\\src\\\\components\\\\PostDetails\\\\EditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport { useNavigate } from 'react-router-dom';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './formStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditForm = () => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: [],\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const history = useNavigate(); // clears the post form to it's default state\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: [],\n      selectedFile: ''\n    });\n  }; //populating the form with post data to update\n\n\n  useEffect(() => {\n    if (!(post === null || post === void 0 ? void 0 : post.title)) clear();\n    if (post) setPostData(post); // setting the new data to which got from the form const[postData,setPostData]\n  }, [post]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }, history));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name) && userstate == null) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      elevation: 6,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own memories and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: currentId ? `Updating \"${post.title}\"` : 'Share Your Thought and Experience'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags (coma separated)\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.buttonClear,\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditForm, \"HcPvDf5cSw4LVubU3zUr3NJjGn0=\", false, function () {\n  return [useSelector, useDispatch, useStyles, useNavigate];\n});\n\n_c = EditForm;\nexport default EditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditForm\");","map":{"version":3,"sources":["C:/Users/Hp/Documents/BlogUsingMERN/BlogAndArchieveUsingMERN/client/src/components/PostDetails/EditForm.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","useNavigate","createPost","updatePost","useStyles","EditForm","postData","setPostData","title","message","tags","selectedFile","post","state","currentId","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","history","clear","setCurrentId","handleSubmit","e","preventDefault","name","result","userstate","paper","root","form","target","value","split","fileInput","base64","buttonSubmit","buttonClear"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FileBase from 'react-file-base64';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\nimport useStyles from './formStyle';\r\n\r\nconst EditForm = () => {\r\n  const [postData, setPostData] = useState({ title: '', message: '', tags: [], selectedFile: '' });\r\n  const post = useSelector((state) => (currentId ? state.posts.posts.find((message) => message._id === currentId) : null));\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n  const history = useNavigate();\r\n\r\n  // clears the post form to it's default state\r\n  const clear = () => {\r\n    setCurrentId(0);\r\n    setPostData({ title: '', message: '', tags: [], selectedFile: '' });\r\n  };\r\n\r\n  //populating the form with post data to update\r\n  useEffect(() => {\r\n    if (!post?.title) clear();\r\n    if (post) setPostData(post); // setting the new data to which got from the form const[postData,setPostData]\r\n  }, [post]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (currentId === 0) {\r\n      dispatch(createPost({ ...postData, name: user?.result?.name }, history));\r\n      clear();\r\n    } else {\r\n      dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\r\n      clear();\r\n    }\r\n  };\r\n\r\n  if (!user?.result?.name && userstate == null) {\r\n    return (\r\n      <Paper className={classes.paper} elevation={6}>\r\n        <Typography variant=\"h6\" align=\"center\">\r\n          Please Sign In to create your own memories and like other's memories.\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n    return (\r\n     \r\n        <Paper className={classes.paper}>\r\n          <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n           <Typography variant=\"h6\">{currentId ? `Updating \"${post.title}\"` : 'Share Your Thought and Experience'}</Typography>\r\n           <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\r\n           <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\r\n           <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (coma separated)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\r\n           <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\r\n           <Button className={classes.buttonSubmit} variant=\"contained\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n           <Button variant=\"contained\" className={classes.buttonClear} size=\"small\" onClick={clear} fullWidth>Clear</Button>\r\n          </form>\r\n        </Paper>\r\n  );\r\n};\r\n\r\nexport default EditForm;\r\n"]},"metadata":{},"sourceType":"module"}