{"ast":null,"code":"import { FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, CREATE, UPDATE, DELETE, LIKE, COMMENT, GET_USER_BY_ID } from '../constants/actionTypes';\n\nconst temp = (state = {\n  isLoading: true,\n  posts: [],\n  userData: null\n}, action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return { ...state,\n        isLoading: true\n      };\n\n    case 'END_LOADING':\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload.data\n      };\n\n    case FETCH_POST:\n      return { ...state,\n        post: action.payload.post\n      };\n\n    case LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    case COMMENT:\n      return { ...state,\n        posts: state.posts.map(post => {\n          if (post._id === +action.payload._id) {\n            return action.payload;\n          }\n\n          return post;\n        })\n      };\n\n    case GET_USER_BY_ID:\n      console.log(action === null || action === void 0 ? void 0 : action.payload.userData);\n      return { ...state,\n        userData: action.payload.userData\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default temp;","map":{"version":3,"sources":["C:/Users/Hp/Documents/BlogUsingMERN/BlogAndArchieveUsingMERN/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","FETCH_POST","CREATE","UPDATE","DELETE","LIKE","COMMENT","GET_USER_BY_ID","temp","state","isLoading","posts","userData","action","type","payload","data","currentPage","numberOfPages","post","map","_id","filter","console","log"],"mappings":"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","sourcesContent":["import { FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, CREATE, UPDATE, DELETE, LIKE, COMMENT ,GET_USER_BY_ID} from '../constants/actionTypes';\r\n\r\nconst temp = (state = { isLoading: true, posts: [], userData: null }, action) => {\r\n  switch (action.type) {\r\n    case 'START_LOADING':\r\n      return { ...state, isLoading: true };\r\n    case 'END_LOADING':\r\n      return { ...state, isLoading: false };\r\n    case FETCH_ALL:\r\n      return {\r\n        ...state,\r\n        posts: action.payload.data,\r\n        currentPage: action.payload.currentPage,\r\n        numberOfPages: action.payload.numberOfPages,\r\n      };\r\n    case FETCH_BY_SEARCH:\r\n      return { ...state, posts: action.payload.data };\r\n    case FETCH_POST:\r\n      return { ...state, post: action.payload.post };\r\n    case LIKE:\r\n      return { ...state, posts: state.posts.map((post) => (post._id === action.payload._id ? action.payload : post)) };\r\n    case CREATE:\r\n      return { ...state, posts: [...state.posts, action.payload] };\r\n    case UPDATE:\r\n      return { ...state, posts: state.posts.map((post) => (post._id === action.payload._id ? action.payload : post)) };\r\n    case DELETE:\r\n      return { ...state, posts: state.posts.filter((post) => post._id !== action.payload) };\r\n    case COMMENT:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) => {\r\n          if (post._id === +action.payload._id) {\r\n            return action.payload;\r\n          }\r\n          return post;\r\n        }),\r\n      };\r\n    case GET_USER_BY_ID:\r\n            console.log(action?.payload.userData)\r\n            return { ...state, userData: action.payload.userData };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default temp;\r\n"]},"metadata":{},"sourceType":"module"}