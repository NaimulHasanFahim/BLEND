{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Documents\\\\BlogUsingMERN\\\\BlogAndArchieveUsingMERN\\\\client\\\\src\\\\components\\\\PostDetails\\\\Dailog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { withStyles, MenuItem } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { teal, grey } from \"@material-ui/core/colors\";\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport { useNavigate } from 'react-router-dom';\nimport { createPost, updatePost } from '../../actions/posts';\nimport ChipInput from 'material-ui-chip-input';\nimport useStyles from './formStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BootstrapDialog = styled(Dialog)(({\n  theme\n}) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2)\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1)\n  }\n}));\n\nconst BootstrapDialogTitle = props => {\n  const {\n    children,\n    onClose,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(DialogTitle, {\n    sx: {\n      m: 0,\n      p: 2\n    },\n    ...other,\n    children: [children, onClose ? /*#__PURE__*/_jsxDEV(IconButton, {\n      \"aria-label\": \"close\",\n      onClick: onClose,\n      sx: {\n        position: 'absolute',\n        right: 8,\n        top: 8,\n        color: theme => theme.palette.grey[500]\n      },\n      children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BootstrapDialogTitle;\nBootstrapDialogTitle.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired\n};\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  primaryColor: {\n    color: teal[500]\n  },\n  secondaryColor: {\n    color: grey[700]\n  },\n  padding: {\n    padding: 0\n  },\n  mainHeader: {\n    backgroundColor: grey[100],\n    padding: 20,\n    alignItems: \"center\"\n  },\n  mainContent: {\n    padding: 40\n  },\n  secondaryContainer: {\n    padding: \"20px 25px\",\n    backgroundColor: grey[200]\n  }\n});\n\nexport default function CustomizedDialogs({\n  currentId\n}) {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const classes = styles;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    var _user$result;\n\n    dispatch(updatePost(currentId, { ...postData,\n      name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n    }));\n\n    for (let i = 0; i < 1000000; i++) {}\n\n    clear();\n    history(`/posts/${currentId}`);\n    setOpen(false);\n  }; ///FORM WORK\n\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: [],\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes1 = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const history = useNavigate(); // clears the post form to it's default state\n\n  const clear = () => {\n    // setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: [],\n      selectedFile: ''\n    });\n  }; //populating the form with post data to update\n\n\n  useEffect(() => {\n    if (!(post === null || post === void 0 ? void 0 : post.title)) clear();\n    if (post) setPostData(post); // setting the new data to which got from the form const[postData,setPostData]\n  }, [post]);\n\n  const handleSubmit = async e => {\n    var _user$result2;\n\n    e.preventDefault();\n    dispatch(updatePost(currentId, { ...postData,\n      name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n    }));\n\n    for (let i = 0; i < 1000000; i++) {}\n\n    clear();\n    history(`/posts/${currentId}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      variant: \"fill\",\n      onClick: handleClickOpen,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(BootstrapDialog, {\n      onClose: handleClose,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: open,\n      children: [/*#__PURE__*/_jsxDEV(BootstrapDialogTitle, {\n        id: \"customized-dialog-title\",\n        onClose: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 8,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              className: classes.mainHeader,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 8,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.primaryColor,\n                  variant: \"h5\",\n                  children: \"Edit Post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              className: classes.mainContent,\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  margin: \"dense\",\n                  variant: \"outlined\",\n                  label: \"Title\",\n                  id: \"title\",\n                  value: post.title,\n                  onChange: e => setPostData({ ...post,\n                    title: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  multiline: true,\n                  rows: \"6\",\n                  margin: \"dense\",\n                  variant: \"outlined\",\n                  label: \"Message\",\n                  id: \"message\",\n                  value: post.message,\n                  onChange: e => setPostData({ ...post,\n                    message: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  margin: \"dense\",\n                  variant: \"outlined\",\n                  label: \"Tags (Comma separated)\",\n                  id: \"tags\",\n                  value: post.tags,\n                  onChange: e => setPostData({ ...post,\n                    tags: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.fileInput,\n                children: /*#__PURE__*/_jsxDEV(FileBase, {\n                  type: \"file\",\n                  multiple: false,\n                  onDone: ({\n                    base64\n                  }) => console.log('hi')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 62\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          autoFocus: true,\n          onClick: handleClose,\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomizedDialogs, \"JxNyZciZYkf3o3V7x9SNz960LS0=\", false, function () {\n  return [useSelector, useDispatch, useStyles, useNavigate];\n});\n\n_c2 = CustomizedDialogs;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BootstrapDialogTitle\");\n$RefreshReg$(_c2, \"CustomizedDialogs\");","map":{"version":3,"sources":["C:/Users/Hp/Documents/BlogUsingMERN/BlogAndArchieveUsingMERN/client/src/components/PostDetails/Dailog.js"],"names":["React","useState","useEffect","PropTypes","styled","Dialog","DialogTitle","DialogContent","DialogActions","IconButton","CloseIcon","withStyles","MenuItem","Grid","Divider","Icon","teal","grey","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","useNavigate","createPost","updatePost","ChipInput","useStyles","BootstrapDialog","theme","padding","spacing","BootstrapDialogTitle","props","children","onClose","other","m","p","position","right","top","color","palette","propTypes","node","func","isRequired","styles","root","flexGrow","primaryColor","secondaryColor","mainHeader","backgroundColor","alignItems","mainContent","secondaryContainer","CustomizedDialogs","currentId","open","setOpen","classes","handleClickOpen","handleClose","dispatch","postData","name","user","result","i","clear","history","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","classes1","JSON","parse","localStorage","getItem","handleSubmit","e","preventDefault","target","value","fileInput","base64","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport { withStyles, MenuItem } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { teal, grey } from \"@material-ui/core/colors\";\r\n\r\n\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FileBase from 'react-file-base64';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\nimport ChipInput from 'material-ui-chip-input';\r\nimport useStyles from './formStyle';\r\n\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  primaryColor: {\r\n    color: teal[500]\r\n  },\r\n  secondaryColor: {\r\n    color: grey[700]\r\n  },\r\n\r\n  padding: {\r\n    padding: 0\r\n  },\r\n  mainHeader: {\r\n    backgroundColor: grey[100],\r\n    padding: 20,\r\n    alignItems: \"center\"\r\n  },\r\n  mainContent: {\r\n    padding: 40\r\n  },\r\n  secondaryContainer: {\r\n    padding: \"20px 25px\",\r\n    backgroundColor: grey[200]\r\n  }\r\n});\r\n\r\nexport default function CustomizedDialogs({currentId}) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = styles;\r\n  \r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\r\n    for (let i = 0; i < 1000000; i++){\r\n        \r\n    }\r\n    clear();\r\n    history(`/posts/${currentId}`)\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  ///FORM WORK\r\n\r\n  const [postData, setPostData] = useState({ title: '', message: '', tags: [], selectedFile: '' });\r\n  const post = useSelector((state) => (currentId ? state.posts.posts.find((message) => message._id === currentId) : null));\r\n  const dispatch = useDispatch();\r\n  const classes1 = useStyles();\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n  const history = useNavigate();\r\n  // clears the post form to it's default state\r\n  const clear = () => {\r\n    // setCurrentId(0);\r\n    setPostData({ title: '', message: '', tags: [], selectedFile: '' });\r\n  };\r\n  //populating the form with post data to update\r\n  useEffect(() => {\r\n    if (!post?.title) clear();\r\n    if (post) setPostData(post); // setting the new data to which got from the form const[postData,setPostData]\r\n  }, [post]);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\r\n    for (let i = 0; i < 1000000; i++){\r\n        \r\n    }\r\n    clear();\r\n    history(`/posts/${currentId}`)\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n       <MenuItem variant=\"fill\" onClick={handleClickOpen}>Edit</MenuItem>\r\n      <BootstrapDialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          \r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container>\r\n                  <Grid item xs={8}>\r\n                      <Grid container direction=\"row\" className={classes.mainHeader}>\r\n                          <Grid item xs={8}>\r\n                              <Typography className={classes.primaryColor} variant=\"h5\">\r\n                                  Edit Post\r\n                              </Typography>\r\n                          </Grid>\r\n                      </Grid>\r\n                      <Grid container direction=\"row\" className={classes.mainContent} spacing={1} >\r\n                          <Grid item xs={12}>\r\n                              <TextField fullWidth margin=\"dense\" variant=\"outlined\" label=\"Title\" id=\"title\" value={post.title} onChange={(e) => setPostData({ ...post, title: e.target.value })} />\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                              <TextField fullWidth multiline rows=\"6\" margin=\"dense\" variant=\"outlined\" label=\"Message\" id=\"message\" value={post.message} onChange={(e) => setPostData({ ...post, message: e.target.value })} />\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                              <TextField fullWidth margin=\"dense\" variant=\"outlined\" label=\"Tags (Comma separated)\" id=\"tags\" value={post.tags} onChange={(e) => setPostData({ ...post, tags: e.target.value })} />\r\n                          </Grid>\r\n                          <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => console.log('hi')} /></div>\r\n           \r\n                      </Grid>\r\n                  </Grid>\r\n              </Grid>\r\n\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose}>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}